import 'package:flutter/material.dart';
import 'profile_page.dart';
import 'package:flutter/foundation.dart';
import 'login_page.dart';
import 'package:http/http.dart' as http;

// -----------------------------------------------------------------------------
//  HomePage Class
// -----------------------------------------------------------------------------
class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

// -----------------------------------------------------------------------------
//  _HomePageState Class
// -----------------------------------------------------------------------------
class _HomePageState extends State<HomePage> {
  // ---------------------------------------------------------------------------
  //  State Variables
  // ---------------------------------------------------------------------------
  String _selectedTab = 'ALL';
  String _selectedCategory = '';
  final List<Map<String, String>> _allItems = [
    {'id': '1', 'title': 'LaDS Caleb Keychain', 'price': 'P100', 'category': 'Keychains', 'date': '2024-01-20', 'image': 'lib/images/keyC1.jpg'},
    {'id': '2', 'title': 'Studio Ghibli Notepads', 'price': 'P30', 'category': 'Stationaries', 'date': '2024-01-10', 'image': 'lib/images/stationary1.jpg'},
    {'id': '3', 'title': 'BRAT BUT FILIPINO Vinyl Stickers', 'price': 'P30', 'category': 'Stickers', 'date': '2024-02-01', 'image': 'lib/images/sticker1.png'},
    {'id': '4', 'title': 'Zhongli Acrylic Stand', 'price': 'P100', 'category': 'Stationaries', 'date': '2024-01-28', 'image': 'lib/images/stationary2.jpg'},
    {'id': '5', 'title': 'LaDS Sylus Keychain', 'price': 'P100', 'category': 'Keychains', 'date': '2024-02-05', 'image': 'lib/images/keyC3.jpg'},
    {'id': '6', 'title': 'LaDS Rafayel Keychain', 'price': 'P100', 'category': 'Keychains', 'date': '2024-02-10', 'image': 'lib/images/keyC2.jpg'},
    {'id': '7', 'title': 'LaDS Zayne Keychain', 'price': 'P100', 'category': 'Keychains', 'date': '2024-01-22', 'image': 'lib/images/keyC4.jpg'},
    {'id': '8', 'title': 'TokkiToons Hype Boy Vinyl', 'price': 'P70', 'category': 'Stickers', 'date': '2024-02-01', 'image': 'lib/images/sticker2.jpg'}
  ];
  final List<Map<String, dynamic>> _cartItems = [];
  final List<Map<String, dynamic>> _orderHistory = [];
  String _searchQuery = ''; // Added for search
  final TextEditingController _searchController = TextEditingController(); // Added controller

  // ---------------------------------------------------------------------------
  //  Getter Methods
  // ---------------------------------------------------------------------------
  List<Map<String, String>> get _displayedItems {
    if (kDebugMode) {
      print('Selected Category: $_selectedCategory');
    }

    // Apply category filter
    List<Map<String, String>> filteredList = _allItems;
    if (_selectedCategory.isNotEmpty) {
      filteredList = _allItems.where((item) => item['category'] == _selectedCategory).toList();
    }

    // Apply tab filter
    if (_selectedTab == 'NEWEST') {
      filteredList.sort((a, b) => b['date']!.compareTo(a['date']!));
    } else if (_selectedTab == 'POPULAR') {
      filteredList.sort((a, b) => b['price']!.compareTo(a['price']!));
    }

    // Apply search filter
    if (_searchQuery.isNotEmpty) {
      filteredList = filteredList.where((item) => item['title']!.toLowerCase().contains(_searchQuery.toLowerCase())).toList();
    }

    if (kDebugMode) {
      print('Filtered List: $filteredList');
    }
    return filteredList;
  }

  // ---------------------------------------------------------------------------
  //  Helper Methods
  // ---------------------------------------------------------------------------
  double _calculateCartTotal() {
    double total = 0;
    for (var item in _cartItems) {
      total += double.parse(item['price'].toString()) * item['quantity'];
    }
    return total;
  }

  // ---------------------------------------------------------------------------
  //  Navigation Methods
  // ---------------------------------------------------------------------------
  void _handleMenuSelection(BuildContext context, String choice) {
    if (choice == 'Profile') {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) =>  ProfilePage(orderHistory: _orderHistory)),
      );
    } else if (choice == 'Logout') {
      if (kDebugMode) {
        print('Logging out...');
      }
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const LoginPage()),
      );
    }
  }

  // ---------------------------------------------------------------------------
  //  Dialog and Bottom Sheet Methods
  // ---------------------------------------------------------------------------
  void _showCart(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Your Cart', style: TextStyle(color: Colors.blueAccent)),
          backgroundColor: Colors.white,
          content: StatefulBuilder(
            builder: (context, setState) {
              if (_cartItems.isEmpty) {
                return const Text('Your cart is empty.', style: TextStyle(color: Colors.blueGrey));
              } else {
                return SizedBox(
                  height: 200,
                  width: double.maxFinite,
                  child: ListView.builder(
                    itemCount: _cartItems.length,
                    itemBuilder: (context, index) {
                      final item = _cartItems[index];
                      final itemPrice = double.parse(item['price'].toString());
                      final quantity = item['quantity'];
                      final subtotal = itemPrice * quantity;

                      return ListTile(
                        title: Text(item['title'] ?? 'Unknown', style: const TextStyle(color: Colors.blue)),
                        subtitle: Text(
                          'Price: P${itemPrice.toStringAsFixed(2)} x ${item['quantity']} = P${subtotal.toStringAsFixed(2)}',
                          style: const TextStyle(color: Colors.blueGrey),
                        ),
                        trailing: IconButton(
                          icon: const Icon(
                            Icons.remove_circle_outline,
                            color: Colors.redAccent,
                          ),
                          onPressed: () {
                            setState(() {
                              if (item['quantity'] > 1) {
                                item['quantity']--;
                                item['price'] = (itemPrice * item['quantity']).toStringAsFixed(2);
                              } else {
                                _cartItems.removeAt(index);
                              }
                            });
                          },
                        ),
                      );
                    },
                  ),
                );
              }
            },
          ),
          actions: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text(
                    'Continue Shopping',
                  ),
                ),
                // Disable the checkout button if the cart is empty
                if (_cartItems.isNotEmpty)
                  ElevatedButton(
                    onPressed: () {
                      _showCheckoutForm(context);
                    },
                    child: const Text('Checkout'),
                  )
                else
                  ElevatedButton(
                    onPressed: null, // Disable the button
                    child: const Text('Checkout'),
                  ),
              ],
            ),
            if (_cartItems.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  'Total: P${_calculateCartTotal().toStringAsFixed(2)}',
                  style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18, color: Colors.white),
                ),
              ),
          ],
        );
      },
    );
  }

  void _showCheckoutForm(BuildContext context) {
    final _formKey = GlobalKey<FormState>();
    String _paymentMethod = 'COD';
    final TextEditingController _receiverNameController = TextEditingController();
    String _region = '';
    String _province = '';
    String _city = '';
    String _barangay = '';
    String _postalCode = '';
    final TextEditingController _specificAddressController = TextEditingController();
    String _paypalEmail = '';

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Checkout'),
              content: SizedBox(
                width: MediaQuery.of(context).size.width * 0.8,
                child: SingleChildScrollView(
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        const Text('Payment Method:', style: TextStyle(fontWeight: FontWeight.bold)),
                        RadioListTile<String>(
                          title: const Text('Cash on Delivery (COD)'),
                          value: 'COD',
                          groupValue: _paymentMethod,
                          onChanged: (value) {
                            setState(() {
                              _paymentMethod = value!;
                            });
                          },
                        ),
                        RadioListTile<String>(
                          title: const Text('PayPal'),
                          value: 'PayPal',
                          groupValue: _paymentMethod,
                          onChanged: (value) {
                            setState(() {
                              _paymentMethod = value!;
                            });
                          },
                        ),
                        if (_paymentMethod == 'PayPal')
                          TextFormField(
                            keyboardType: TextInputType.emailAddress,
                            decoration: const InputDecoration(labelText: 'PayPal Email'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter your PayPal email';
                              }
                              if (!value.contains('@')) {
                                return 'Invalid email address';
                              }
                              return null;
                            },
                            onSaved: (value) {
                              _paypalEmail = value!;
                            },
                          ),
                        const SizedBox(height: 20),
                        const Text('Delivery Address:', style: TextStyle(fontWeight: FontWeight.bold)),
                        TextFormField(
                          controller: _receiverNameController,
                          decoration: const InputDecoration(labelText: 'Receiver Name'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter receiver\'s name';
                            }
                            return null;
                          },
                        ),
                        TextFormField(
                          decoration: const InputDecoration(labelText: 'Region'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter region';
                            }
                            return null;
                          },
                          onSaved: (value) {
                            _region = value!;
                          },
                        ),
                        TextFormField(
                          decoration: const InputDecoration(labelText: 'Province'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter province';
                            }
                            return null;
                          },
                          onSaved: (value) {
                            _province = value!;
                          },
                        ),
                        TextFormField(
                          decoration: const InputDecoration(labelText: 'City'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter city';
                            }
                            return null;
                          },
                          onSaved: (value) {
                            _city = value!;
                          },
                        ),
                        TextFormField(
                          decoration: const InputDecoration(labelText: 'Barangay'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter barangay';
                            }
                            return null;
                          },
                          onSaved: (value) {
                            _barangay = value!;
                          },
                        ),
                        TextFormField(
                          decoration: const InputDecoration(labelText: 'Postal Code'),
                          keyboardType: TextInputType.numberWithOptions(),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter postal code';
                            }
                            if (value.length < 4) {
                              return 'Invalid postal code';
                            }
                            return null;
                          },
                          onSaved: (value) {
                            _postalCode = value!;
                          },
                        ),
                        TextFormField(
                          controller: _specificAddressController,
                          decoration: const InputDecoration(labelText: 'Specific Address (Street, Building, House #, etc.)'),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter specific address';
                            }
                            return null;
                          },
                          maxLines: 3,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('Cancel'),
                ),
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      _formKey.currentState!.save();
                      _processOrder(context, _paymentMethod, {
                        'receiverName': _receiverNameController.text,
                        'region': _region,
                        'province': _province,
                        'city': _city,
                        'barangay': _barangay,
                        'postalCode': _postalCode,
                        'specificAddress': _specificAddressController.text,
                        if (_paymentMethod == 'PayPal') 'paypalEmail': _paypalEmail,
                      });
                    }
                  },
                  child: const Text('Place Order'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _showQuantityModal(BuildContext context, Map<String, String> item) {
    int quantity = 1;
    double price = double.parse(item['price']!.substring(1));
    String imagePath = item['image'] ?? 'lib/images/placeholder.jpg';

    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  Container(
                    width: 200,
                    height: 200,
                    margin: const EdgeInsets.only(bottom: 10),
                    child: Image.asset(
                      imagePath,
                      fit: BoxFit.cover,
                    ),
                  ),
                  Text(
                    item['title']!,
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: <Widget>[
                      const Text('Quantity:', style: TextStyle(fontSize: 16)),
                      Row(
                        children: [
                          IconButton(
                            icon: const Icon(Icons.remove, color: Colors.blue),
                            onPressed: () {
                              setState(() {
                                if (quantity > 1) {
                                  quantity--;
                                }
                              });
                            },
                          ),
                          Text('$quantity', style: const TextStyle(fontSize: 16)),
                          IconButton(
                            icon: const Icon(Icons.add, color: Colors.blue),
                            onPressed: () {
                              setState(() {
                                quantity++;
                              });
                            },
                          ),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Text('Total Price: P${(quantity * price).toStringAsFixed(2)}',
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      if (kDebugMode) {
                        print('Added $quantity of ${item['title']} to cart');
                      }
                      setState(() {
                        int existingIndex =
                        _cartItems.indexWhere((cartItem) => cartItem['title'] == item['title']);
                        if (existingIndex != -1) {
                          _cartItems[existingIndex]['quantity'] += quantity;
                          _cartItems[existingIndex]['price'] = price.toStringAsFixed(2);
                          _cartItems[existingIndex]['totalPrice'] =
                              (quantity * price).toStringAsFixed(2);
                        } else {
                          _cartItems.add({
                            'id': item['id'],
                            'title': item['title'],
                            'price': price.toStringAsFixed(2),
                            'quantity': quantity,
                            'image': item['image'],
                            'totalPrice': (quantity * price).toStringAsFixed(2),
                          });
                        }
                      });
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('$quantity ${item['title']} added to cart'),
                          duration: const Duration(seconds: 2),
                        ),
                      );
                    },
                    child: const Text('Add to Cart'),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  // ---------------------------------------------------------------------------
  //  Order Processing Method
  // ---------------------------------------------------------------------------
  void _processOrder(BuildContext context, String paymentMethod, Map<String, String> deliveryDetails) {
    if (kDebugMode) {
      print('Processing order with payment method: $paymentMethod');
      print('Delivery details: $deliveryDetails');
      print('Cart Items: $_cartItems');
    }

    // Store order details
    List<Map<String, dynamic>> orderDetails = [];
    for(var cartItem in _cartItems){
      orderDetails.add({
        'title': cartItem['title'],
        'quantity': cartItem['quantity'],
        'price': cartItem['price'],
      });
    }
    _orderHistory.add({'order': orderDetails, 'deliveryDetails': deliveryDetails, 'paymentMethod': paymentMethod, 'totalPrice' : _calculateCartTotal()});

    // Close the cart and checkout dialogs
    Navigator.of(context).pop(); // Close checkout
    Navigator.of(context).pop(); // Close cart

    setState(() {
      _cartItems.clear();
    });

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Thank you!'),
          content: const Text('Your order has been placed successfully.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  // ---------------------------------------------------------------------------
  //  Widget Builder Methods
  // ---------------------------------------------------------------------------
  Widget _buildCarouselItem(BuildContext context, int index) {
    return Container(
      width: 150,
      margin: const EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: Colors.blue[100],
      ),
      child: Image.asset(
        'lib/images/fav${index + 1}.jpg',
        width: 150,
        height: 200,
        fit: BoxFit.cover,
        frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {
          if (frame == null) {
            return const CircularProgressIndicator();
          }
          return ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: child,
          );
        },
      ),
    );
  }

  Widget _buildCategoryIcon(String title, IconData icon) {
    final isSelected = _selectedCategory == title;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedCategory = isSelected ? '' : title;
          });
        },
        child: Column(
          children: [
            Icon(icon, color: isSelected ? Colors.blueGrey : Colors.blue, size: 30),
            Text(
              title,
              style: TextStyle(fontSize: 12, color: isSelected ? Colors.blueGrey : Colors.blue),
            ),
            if (isSelected)
              Container(
                margin: const EdgeInsets.only(top: 2),
                height: 3,
                width: 20,
                color: Colors.white,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryTab(String title) {
    final isSelected = _selectedTab == title;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedTab = title;
          });
        },
        child: Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.blue),
            borderRadius: BorderRadius.circular(5),
            color: isSelected ? Colors.blue : Colors.transparent,
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Text(
            title,
            style: TextStyle(fontSize: 16, color: isSelected ? Colors.white : Colors.blue),
          ),
        ),
      ),
    );
  }

  Widget _buildItemCard(BuildContext context, int index, List<Map<String, String>> displayedItems) {
    final item = displayedItems[index];
    String imagePath = item['image'] ?? 'lib/images/placeholder.jpg';
    return GestureDetector(
      onTap: () {
        _showQuantityModal(context, item);
      },
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: const BorderRadius.only(topLeft: Radius.circular(8), topRight: Radius.circular(8)),
                  color: Colors.grey[300],
                ),
                child: Center(
                  child: Image.asset(
                    imagePath,
                    fit: BoxFit.cover,
                    width: double.infinity,
                    height: double.infinity,
                  ),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(item['title']!, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                  Text(item['price']!, style: TextStyle(fontSize: 10, color: Colors.grey[600])),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ---------------------------------------------------------------------------
  //  Build Method
  // ---------------------------------------------------------------------------
  @override
  Widget build(BuildContext context) {
    final List<Map<String, String>> displayedItems = _displayedItems;
    return Scaffold(
      appBar: AppBar(
        title: Image.asset(
          'lib/images/piecesOFus.png',
          height: 30,
          scale: 1,
        ),
        actions: [
          // Search Icon Button
          IconButton(
            icon: const Icon(Icons.search, color: Colors.white),
            onPressed: () {
              showSearch(
                context: context,
                delegate: ItemSearchDelegate(
                  allItems: _allItems,
                  onSearch: (query) {
                    setState(() {
                      _searchQuery = query;
                    });
                  },
                ),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.shopping_cart, color: Colors.white),
            onPressed: () {
              _showCart(context);
            },
          ),
          PopupMenuButton<String>(
            onSelected: (String choice) {
              _handleMenuSelection(context, choice);
            },
            itemBuilder: (BuildContext context) {
              return [
                const PopupMenuItem<String>(
                  value: 'Profile',
                  child: Text('Profile'),
                ),
                const PopupMenuItem<String>(
                  value: 'Logout',
                  child: Text('Logout'),
                ),
              ];
            },
            icon: const Icon(Icons.settings, color: Colors.white),
          ),
        ],
        backgroundColor: Colors.blue,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Text('FAVORITES',
                style: TextStyle(
                  fontSize: 20,fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
            ),
            SizedBox(
              height: 200,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: 5,
                itemBuilder: (context, index) {
                  return _buildCarouselItem(context, index);
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    _buildCategoryIcon('Keychains', Icons.key_outlined),
                    _buildCategoryIcon('Pins', Icons.push_pin_outlined),
                    _buildCategoryIcon('Phone Acces.', Icons.phone_android),
                    _buildCategoryIcon('Stationaries', Icons.edit_note),
                    _buildCategoryIcon('Stickers', Icons.sticky_note_2),
                    _buildCategoryIcon('Bags', Icons.shopping_bag),
                    _buildCategoryIcon('Mystery Boxes', Icons.card_giftcard),
                  ],
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildCategoryTab('ALL'),
                    _buildCategoryTab('NEWEST'),
                    _buildCategoryTab('POPULAR'),
                    // Add the "Reset" button here
                    Padding(
                      padding: const EdgeInsets.only(left: 8.0),
                      child: ElevatedButton(
                        onPressed: () {
                          setState(() {
                            _searchQuery = ''; // Clear the search query
                          });
                        },
                        child: const Text('Reset'),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            if (displayedItems.isNotEmpty) ...[
              GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  childAspectRatio: 0.8,
                ),
                itemCount: displayedItems.length,
                itemBuilder: (context, index) {
                  return _buildItemCard(context, index, displayedItems);
                },
              ),
            ] else ...[
              const Padding(
                padding: EdgeInsets.all(16.0),
                child: Center(
                  child: Text(
                    "No products available in this category.",
                    style: TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}

// -----------------------------------------------------------------------------
//  Search Delegate Class
// -----------------------------------------------------------------------------
class ItemSearchDelegate extends SearchDelegate<String> {
  final List<Map<String, String>> allItems;
  final Function(String) onSearch;

  ItemSearchDelegate({required this.allItems, required this.onSearch});

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: const Icon(Icons.clear),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    onSearch(query); // Call the onSearch callback
    return Container(); //  Return empty, search is handled in home page.
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestionList = query.isEmpty
        ? []
        : allItems.where((item) {
      return item['title']!.toLowerCase().contains(query.toLowerCase());
    }).toList();

    return ListView.builder(
      itemCount: suggestionList.length,
      itemBuilder: (context, index) {
        final item = suggestionList[index];
        return ListTile(
          title: Text(item['title']!),
          onTap: () {
            query = item['title']!;
            onSearch(query); // call the onSearch
            close(context, query);
          },
        );
      },
    );
  }
}

