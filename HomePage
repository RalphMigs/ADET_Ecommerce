import 'package:flutter/material.dart';
import 'search_page.dart';
import 'package:flutter/foundation.dart';
//import 'category_page.dart'; // Import the CategoryPage //remove this

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _selectedTab = 'ALL';
  //String get _selectedCategory => '';  //remove this
  String _selectedCategory = '';
  final List<Map<String, String>> _allItems = [
    {'id': '1', 'title': 'LaDS Caleb Keychain', 'price': 'P100', 'category': 'keychains', 'date': '2024-01-20', 'image': 'lib/images/keyC1.jpg'}, // Added image
    {'id': '2', 'title': 'Studio Ghibli Notepads', 'price': 'P30', 'category': 'stationaries', 'date': '2024-01-10', 'image': 'lib/images/stationary1.jpg'},    // Added image
    {'id': '3', 'title': 'BRAT BUT FILIPINO Vinyl Stickers', 'price': 'P30', 'category': 'stickers', 'date': '2024-02-01', 'image': 'lib/images/sticker1.png'},      // Added image
    {'id': '4', 'title': 'Zhongli Acrylic Stand', 'price': 'P100', 'category': 'stationaries', 'date': '2024-01-28', 'image': 'lib/images/stationary2.jpg'},          // Added image
    {'id': '5', 'title': 'LaDS Sylus Keychain', 'price': 'P100', 'category': 'keychains', 'date': '2024-02-05', 'image': 'lib/images/keyC3.jpg'}, // Added image
    {'id': '6', 'title': 'LaDS Rafayel Keychain', 'price': 'P100', 'category': 'keychains', 'date': '2024-02-10', 'image': 'lib/images/keyC2.jpg'}, // Added image
    {'id': '7', 'title': 'LaDS Zayne Keychain', 'price': 'P100', 'category': 'keychains', 'date': '2024-01-22', 'image': 'lib/images/keyC4.jpg'}, // Added image
    {'id': '8', 'title': 'TokkiToons Hype Boy Vinyl', 'price': 'P70', 'category': 'stickers', 'date': '2024-02-01', 'image': 'lib/images/sticker2.jpg'}
  ];

  List<Map<String, String>> get _displayedItems {
    if (kDebugMode) {
      print('Selected Category: $_selectedCategory');
    }
    // Apply category filter
    List<Map<String, String>> filteredList = _allItems;
    if (_selectedCategory.isNotEmpty) {
      filteredList = _allItems.where((item) => item['category'] == _selectedCategory).toList();
    }

    // Apply tab filter
    if (_selectedTab == 'NEWEST') {
      filteredList.sort((a, b) => b['date']!.compareTo(a['date']!)); // Sort by date
    } else if (_selectedTab == 'POPULAR') {
      // For simplicity, let's assume 'popular' is based on price,
      //  You'd replace this with actual popularity logic.
      filteredList.sort((a, b) => b['price']!.compareTo(a['price']!));
    }

    if (kDebugMode) {
      print('Filtered List: $filteredList');
    }
    return filteredList;
  }

  @override
  Widget build(BuildContext context) {
    final List<Map<String, String>> displayedItems = _displayedItems;
    return Scaffold(
      appBar: AppBar(
        title: Image.asset(
          'lib/images/piecesOFus.png', //  Keep this if it's your logo
          height: 30,
          scale: 1,
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const SearchPage()),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.shopping_cart),
            onPressed: () {
              _showCartModal(context, null); // Pass null initially
            },
          ),
        ],
        backgroundColor: Colors.blue,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Text(
                'FAVORITES',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
            ),
            SizedBox(
              height: 200,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: 5,
                itemBuilder: (context, index) {
                  // Use your own image here, do not change this line
                  return _buildCarouselItem(context, index);
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  children: [
                    _buildCategoryIcon('keychains', Icons.key_outlined),
                    _buildCategoryIcon('pins', Icons.push_pin_outlined),
                    _buildCategoryIcon('phone accessories', Icons.phone_android),
                    _buildCategoryIcon('stationaries', Icons.edit_note),
                    _buildCategoryIcon('stickers', Icons.sticky_note_2),
                    _buildCategoryIcon('bags', Icons.shopping_bag),
                    _buildCategoryIcon('mystery boxes', Icons.card_giftcard),
                  ],
                ),
              ),
            ),
            // Added ALL, NEWEST, POPULAR buttons here
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Center( // Wrap with a Center widget
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center, // center the buttons
                  children: [
                    _buildCategoryTab('ALL'),
                    _buildCategoryTab('NEWEST'),
                    _buildCategoryTab('POPULAR'),
                  ],
                ),
              ),
            ),
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
              ),
              itemCount: displayedItems.length,
              itemBuilder: (context, index) {
                // Pass the image path from the item data.  Use a placeholder if null.
                return _buildItemCard(context, index, displayedItems);
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCarouselItem(BuildContext context, int index) {
    //  DO NOT MODIFY THIS FUNCTION
    return Container(
      width: 150,
      margin: const EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: Colors.blue[100],
      ),
      child: Image.asset(
        'lib/images/fav${index + 1}.jpg',
        width: 150,
        height: 200,
        fit: BoxFit.cover,
        frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {
          if (frame == null) {
            return const CircularProgressIndicator();
          }
          return ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: child,
          );
        },
      ),
    );
  }

  Widget _buildCategoryIcon(String title, IconData icon) {
    final isSelected = _selectedCategory == title;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedCategory = isSelected ? '' : title;
          });
          // Navigate to CategoryPage when a category is tapped
          /*Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => CategoryPage(category: title, items: _allItems), // Pass the category title and all items
            ),
          );
          */
        },
        child: Column(
          children: [
            Icon(icon, color: isSelected ? Colors.blueGrey : Colors.blue),
            Text(
              title,
              style: TextStyle(fontSize: 12, color: isSelected ? Colors.blueGrey : Colors.blue),
            ),
            if (isSelected)
              Container(
                margin: const EdgeInsets.only(top: 2),
                height: 3,
                width: 20,
                color: Colors.white,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryTab(String title) {
    final isSelected = _selectedTab == title;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedTab = title;
          });
        },
        child: Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.blue),
            borderRadius: BorderRadius.circular(5),
            color: isSelected ? Colors.blue : Colors.transparent,
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Text(
            title,
            style: TextStyle(fontSize: 16, color: isSelected ? Colors.white : Colors.blue),
          ),
        ),
      ),
    );
  }

  Widget _buildItemCard(BuildContext context, int index, List<Map<String, String>> displayedItems) {
    final item = displayedItems[index];
    String imagePath = item['image'] ?? 'lib/images/placeholder.jpg';
    return GestureDetector(
      onTap: () {
        _showCartModal(context, item); // Pass the item here
      },
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: Container(
                decoration:  BoxDecoration(
                  borderRadius: const BorderRadius.only(topLeft: Radius.circular(8), topRight: Radius.circular(8)),
                  color: Colors.grey[300],
                ),
                child: Center(
                  child: Image.asset(
                    imagePath,
                    fit: BoxFit.cover,
                    width: double.infinity,
                    height: double.infinity,
                  ),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(item['title']!, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                  Text(item['price']!, style: TextStyle(fontSize: 10, color: Colors.grey[600])),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showCartModal(BuildContext context, Map<String, String>? item) { // Receive item data
    int cartItemCount = 1; // Initialize here
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: <Widget>[
                      IconButton(
                        icon: const Icon(Icons.remove, color: Colors.blue),
                        onPressed: () {
                          setState(() {
                            if (cartItemCount > 1) {
                              cartItemCount--;
                            }
                          });
                        },
                      ),
                      Text('$cartItemCount', style: const TextStyle(fontSize: 16)),
                      IconButton(
                        icon: const Icon(Icons.add, color: Colors.blue),
                        onPressed: () {
                          setState(() {
                            cartItemCount++;
                          });
                        },
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () {
                          // Implement delete from cart
                        },
                      ),
                    ],
                  ),
                  Row(
                    children: <Widget>[
                      Container(
                        width: 100,
                        height: 100,
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.black12),
                          borderRadius: BorderRadius.circular(8.0),
                          color: Colors.grey[300],
                        ),
                        child:  item != null ? Image.asset(item['image'] ?? 'lib/images/placeholder.jpg',
                          fit: BoxFit.cover,) : const Center(child: Text('Item Image', style: TextStyle(fontSize: 10))),
                      ),
                      const SizedBox(width: 16),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Text(item != null ? item['title']! : 'Item Title', style: const TextStyle(fontSize: 12)),
                          Text(item != null ? item['price']! : 'Price', style: const TextStyle(fontSize: 10)),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      // Implement checkout functionality
                      if (kDebugMode) {
                        print('Add to cart Pressed with $cartItemCount items');
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size(double.infinity, 50),
                      backgroundColor: Colors.blue,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('ADD TO CART', style: TextStyle(fontSize: 18, color: Colors.white)), // changed here
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
}

