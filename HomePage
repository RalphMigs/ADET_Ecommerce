import 'package:flutter/material.dart';
import 'item_details_page.dart';
import 'search_page.dart';
import 'package:flutter/foundation.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _cartItemCount = 1;
  String _selectedTab = 'ALL';
  String _selectedCategory = '';
  final List<Map<String, String>> _allItems = [
    {'id': '1', 'title': 'Keychain 1', 'price': 'P50', 'category': 'keychains', 'date': '2024-01-20'},
    {'id': '2', 'title': 'Pin 1', 'price': 'P30', 'category': 'pins', 'date': '2024-01-15'},
    {'id': '3', 'title': 'Phone Case 1', 'price': 'P100', 'category': 'phone accessories', 'date': '2024-01-25'},
    {'id': '4', 'title': 'Notebook 1', 'price': 'P70', 'category': 'stationaries', 'date': '2024-01-10'},
    {'id': '5', 'title': 'Sticker 1', 'price': 'P10', 'category': 'stickers', 'date': '2024-02-01'},
    {'id': '6', 'title': 'Bag 1', 'price': 'P200', 'category': 'bags', 'date': '2024-01-28'},
    {'id': '7', 'title': 'Mystery Box 1', 'price': 'P150', 'category': 'mystery boxes', 'date': '2024-02-05'},
    {'id': '8', 'title': 'Keychain 2', 'price': 'P60', 'category': 'keychains', 'date': '2024-02-10'},
    {'id': '9', 'title': 'Pin 2', 'price': 'P40', 'category': 'pins', 'date': '2024-02-08'},
    {'id': '10', 'title': 'Phone Case 2', 'price': 'P120', 'category': 'phone accessories', 'date': '2024-01-22'},
  ];

  List<Map<String, String>> get _displayedItems {
    if (kDebugMode) {
      print('Selected Category: $_selectedCategory');
    }
    // Apply category filter
    List<Map<String, String>> filteredList = _allItems;
    if (_selectedCategory.isNotEmpty) {
      filteredList = _allItems.where((item) => item['category'] == _selectedCategory).toList();
    }
    if (kDebugMode) {
      print('Filtered List: $filteredList');
    }
    return filteredList;
  }

  @override
  Widget build(BuildContext context) {
    final List<Map<String, String>> displayedItems = _displayedItems; // Use the getter
    return Scaffold(
      appBar: AppBar(
        title: Image.asset(
          'lib/images/piecesOFus.png',
          height: 30,
          scale: 1,
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const SearchPage()),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.shopping_cart),
            onPressed: () {
              _showCartModal(context);
            },
          ),
        ],
        backgroundColor: Colors.blue,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Text(
                'FAVORITES',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
            ),
            SizedBox(
              height: 200,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: 5,
                itemBuilder: (context, index) {
                  return _buildCarouselItem(context, index);
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  children: [
                    _buildCategoryIcon('Keychains', Icons.key_outlined),
                    _buildCategoryIcon('Pins', Icons.push_pin_outlined),
                    _buildCategoryIcon('Phone Accessories', Icons.phone_android),
                    _buildCategoryIcon('Stationaries', Icons.edit_note),
                    _buildCategoryIcon('Stickers', Icons.sticky_note_2),
                    _buildCategoryIcon('Bags', Icons.shopping_bag),
                    _buildCategoryIcon('Mystery Boxes', Icons.card_giftcard),
                  ],
                ),
              ),
            ),
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
              ),
              itemCount: displayedItems.length,  // Use the local variable here
              itemBuilder: (context, index) {
                return _buildItemCard(context, index, displayedItems); // Pass displayedItems
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCarouselItem(BuildContext context, int index) {
    return Container(
      width: 150,
      margin: const EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: Colors.blue[100],
      ),
      child: Image.asset(
        'lib/images/fav${index + 1}.jpg',
        width: 150,
        height: 200,
        fit: BoxFit.cover,
        frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {
          if (frame == null) {
            return const CircularProgressIndicator();
          }
          return ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: child,
          );
        },
      ),
    );
  }

  Widget _buildCategoryIcon(String title, IconData icon) {
    final isSelected = _selectedCategory == title;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            _selectedCategory = title;
          });
        },
        child: Column(
          children: [
            Icon(icon, color: isSelected ? Colors.white : Colors.blue),
            Text(
              title,
              style: TextStyle(fontSize: 12, color: isSelected ? Colors.white : Colors.blue),
            ),
            if (isSelected)
              Container(
                margin: const EdgeInsets.only(top: 2),
                height: 3,
                width: 20,
                color: Colors.white,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryTab(String title) {
    final isSelected = _selectedTab == title;
    return TextButton(
      onPressed: () {
        setState(() {
          _selectedTab = title;
        });
      },
      style: TextButton.styleFrom(
        backgroundColor: isSelected ? Colors.blue : Colors.transparent,
      ),
      child: Text(
        title,
        style: TextStyle(
          fontSize: 12,
          color: isSelected ? Colors.white : Colors.blue,
        ),
      ),
    );
  }

  Widget _buildItemCard(BuildContext context, int index, List<Map<String, String>> displayedItems) {
    final item = displayedItems[index];
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ItemDetailsPage(
              index: index,
              item: item,
            ),
          ),
        );
      },
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: const BorderRadius.only(topLeft: Radius.circular(8), topRight: Radius.circular(8)),
                  color: Colors.grey[300],
                ),
                child: Center(child: Text('Item ${item['id']}', style: const TextStyle(fontSize: 10))),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(item['title']!, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                  Text(item['price']!, style: TextStyle(fontSize: 10, color: Colors.grey[600])),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }


  void _showCartModal(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: <Widget>[
                      IconButton(
                        icon: const Icon(Icons.remove, color: Colors.blue),
                        onPressed: () {
                          setState(() {
                            if (_cartItemCount > 1) {
                              _cartItemCount--;
                            }
                          });
                        },
                      ),
                      Text('$_cartItemCount', style: const TextStyle(fontSize: 16)),
                      IconButton(
                        icon: const Icon(Icons.add, color: Colors.blue),
                        onPressed: () {
                          setState(() {
                            _cartItemCount++;
                          });
                        },
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () {
                          // Implement delete from cart
                        },
                      ),
                    ],
                  ),
                  Row(
                    children: <Widget>[
                      Container(
                        width: 100,
                        height: 100,
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.black12),
                          borderRadius: BorderRadius.circular(8.0),
                          color: Colors.grey[300],
                        ),
                        child: const Center(
                            child: Text('Item Image', style: TextStyle(fontSize: 10))),
                      ),
                      const SizedBox(width: 16),
                      const Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Text('AN IK - ANIK STICKERS', style: TextStyle(fontSize: 12)),
                          Text('P35', style: TextStyle(fontSize: 10)),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      // Implement checkout functionality
                      if (kDebugMode) {
                        print('Checkout Pressed with $_cartItemCount items');
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size(double.infinity, 50),
                      backgroundColor: Colors.blue,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('CHECK OUT', style: TextStyle(fontSize: 18, color: Colors.white)),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
}

